장고가 기본 지원하는 모델 필드들 (커스텀 필드를 만드는 것도 가능하다)

그런데 이중에서 기본 키 primary key라는게 존재해서 궁금해서 찾아봤다.
이건 
= > 관계형 데이터베이스에서 조(레코드)의 식별자로 이용하기에 가장 적합한 것을 관계 (테이블)마다 단 한 설계자에 의해 선택, 정의된 후보 키를 말한다. 
=> primary key를 저장하는 필드인 auto field는 데이터베이스가 결정해주므로 직접 만질 필요는 없다

이런 모델필드들은 DB필드 타입을 반영한다
	-> DB에서 지원하는 필드를 반영한다 
(파이썬 입장에선 모든 Str은 모두 같은 str형 but DB의 경우 str은 다 고유의 성질을 가진 str형들이 있다)
	-> 따라서 파이썬 데이터 타입과 DB데이터 타입을 매핑한다
	    (AutoField -> int), (char, slug.... -> str)
	-> 같은 모델필드라고 할 지라도, DB에 따라 다른 타입으로 매핑되어 생성될 수 있기 때문에 이를 염두해 두어야 한다.

// 모델필드는 DB필드 타입 반영, 이렇게 반영된 DB 데이터 타입은 파이썬 데이터타입과 매핑되어 사용됨 
	** (모델필드로 모델을 작성하면 매핑된 파이썬 데이터타입으로 실행된다는 뜻?)




필드는 매우 다양하다. 
하지만 이를 str로만 설정한다면, 저장은 쉽지만, 입력 값 오류를 모두 다 직접 설정해주어야 한다. 따라서 설계한 데이터베이스 구조에 따라 최대한 필드 타입을 타이트 하게 해야한다.
ex) (year –x-> str), (year -> int)


자동 생성되는 id 필드?
	-> 각 row를 식별해주는 자동 생성된 primary key 타입의 필드
	-> 만약 자동 생성된 id필드 외에 다른 것을 갖고싶다면 다른 필드에 primary_key = true 옵션을 써주면 된다.

각 필드는 뿐만 아니라 속성또한 갖고 있다.
예를 들어 필드 값의 blank 허용 여부, 앞서 말했던 primary key 설정 등 다양한 옵션이 존재한다.
그중에는 필수 필드라는 옵션도 존재하는데, 이 부분에서 migration시, 데이터가 존재하지 않으므로 반드시 다른 필드의 값이 대치되거나, 설정을 바꿔야 한다.

협업 Tip
절대 하지말하야 할 일
	팀원 각자가 마이그레이션 파일을 생성 하면 DKSEHOSEK -> 충돌 발생
	추천 대안 : 마이그레이션 파일 생성을 1명이 전담해서 생성한다. (이렇게 생성된 마이그레이션 파일을 버전관리에 넣고, 다른 팀원은 이를 받아서 migrate만 수행)

반영하지 않은 마이그레이션을 다수 생성했다면? -> 하나의 마이그레이션으로 합쳐서 적용!
	방법1) 모든 마이그레이션들을 롤백하고, 마이그레이션들파일 제거후 새 마이그레이션 파일 생성 (이건 근데, 롤백될 때 값들도 함께 삭제되고, 자동복구도 안되므로 의도적인 방법으로 방법을 알아보자 [파이썬으로 뭐시기 저시기])
	방법2) squashmigrations로 미적용 마이그레이션들을 하나로 함치기








Migration -> 모델의 변경내역을 DB스키마로 반영시키는 방법
명령
	-0. ~~ == python manage.py
	-1. ~~ makemigrations <앱 이름>
	-2. ~~ migrate <앱 이름>
	-3. ~~ showmigrations <앱 이름>
	-4. sqlmigrate <앱이름> <마이그레이션-이름>














11강

amin page

장고엔 데이터를 관리할 수 있는 페이지인 admin page가 존재
default 경로의 url을 바꿔야 해킹에 안전,
django-admin-honeypot을 통해 가짜 admin 페이지를 노출하여 해킹 방해 가능
관리 초기에 데이터 관리에 적합하다 -> (superuser만 글을 쓸 경우)
	-> 관리 도구 만들 시간 대신 End-User 서비스에 집중하면 더 이득!



how to do?
  admin.py에 아이템에 대한 모델(즉, DB의 쿼리)를 사용하기 위해서 현재 모델의 itemp을 import해준다.
		->from .models import djang

  후에, admin.py에 이를 등록해준다
		->admin.site.register(Item) // 기본 ModelAdmin으로 동작한다
		->admin,site.register(Item, model_class)//지정한 ModelAdmin으로 동작
 		-> @admin.register(Item) // 2번과 같지만, 코딩이 더 명확하다
			calss Item model~~~~

	지정한 model class??
		-> 기본 모델 클래스에서 객체를 출력 시 object(1)이라는 문자열이 출력된다. 이를 모델클래스를 지정하고, 수정하여 객체의 “name”변수를 출력하도록 클래스를 지정, 등록할 수 있다.
		-> 뿐만 아니라 list_display를 통해 모델 리스트에 출력할 컬럼들을 지정할 수 있다.

** display_list_links를 통해서 필드에 링크를 넣을 수 있다, 
** search_fields를 통해 검색을 위한 필드를 지정할 수 있다.
** list_filter를 통해 필터를 위한 필드를 지정할 수 있다.








13강 모델을 위한 조회


Model Manager
  -> DB의 질의 인터페이스를 제공해주는 모델 메니저
  -> 디폴트 Manager(커스텀도 가능하지만 일단)로서 ModelCls.objects 제공된다.
	// 여기서 “ModelCls”는 모델의 이름이 대치된다.
  -> 이를 통해서 쿼리셋을 얻을 수도 있고, 정렬을 할 수도 값을 넣을 수도 있다.
 	// QuerySet? 

QuerySet? : SQL을 생성해주는 인터페이스이다.
  -> 순회 가능한 객체로, 순회를 통해 데이터에 접근할 수 있다.
  -> 쿼리셋은 Chianing을 지원한다
	(Item.objects.all) -> 쿼리셋 생성 (각 조건은 and로 묶임, or 조건으로 엮고 싶다면, (Q(조건) | Q(조건))과 같이 해야 한다)
	((Item.objects.all).filter()) -> 조건을 Chaining하여 새로운 쿼리셋 생성
	.... -> 쿼리셋 생성
		// filter, exclude 등 다양한 쿼리셋 생성 코드가 존재
  -> 쿼리셋은 Lazy한 특성을 갖는다
	* 즉, 쿼리셋을 만드는 동안 DB접근을 하지 않는다. (SQL도 이때 만들어 지는 것이 아니라, DB에 직접적으로 접근할 때 만들어 지는 것이다.)
 	* 데이터가 필요한 시점에 DB에 접근을 한다. (필요한 시점이 언제인진 아래를 보자)
		1. 출력
		2. list화 (즉, 리스트를 만들기 위해 값이 필요)
		3. 순회를 돌 경우 (for instance in queryset : ....)
			// 순회를 돌 때는 맨 처음만 DB를 접근하고 후엔 그걸 참조하여 동작한다.
		4. 혹은 주피터 노트북, shell에서 Query set을 만들 때 (결과 출력을 위해 접근해야함)

 -> 직접 데이터에 접근하려면? (특정 모델 객체 1개에 획득을 하려면?)
	1. queryset[index_num] (쿼리셋에서 index에 해당하는 데이터 하나만 가져옴)
	2. queryset.get(“조건”) = (조건에 해당하는 조건을 만족하는 객체를 하나 가져온다)
		// 없다면? : 예외 발생, 2개 이상이라면? : 예외 발생
	3. queryset.first(“조건”) = (조건을 만족하는 객체 중 가장 첫 객체를 객체 반환)
	4. queryset.last(“조건”) = first와 유사, 마지막 객체 반환
		// fist와 last의 경우, 조건을 만족하는 객체가 없더라도 예외를 발생하는게 아니라 None을 리턴한다.

쿼리셋의 filter
	=> 우리가 일반적으로 사용한 필터를 생각하면 안된다. 특수한 문법으로 ‘<’와 같은 조건을 표현해야 한다. (이건 DB마다 생성되는 SQL이 다르므로, 사용할 때, 알아서 조사해서 사용하자)







































19강 템플릿 엔진

코드만으로 화면 출력 문자열 조합이 어렵다
템플릿이란? : 복잡한 문자열을 좀 더 쉽게 조합할 수 있도록 도와주는 라이브러리
	// html뿐만 아니라 이메일, 푸쉬메시지, SMS 메시지와 같은 다양한 문자열 조합에 사용할 수 있다

view안의 render 함수(request, 장고 템플릿 Language로 작성된 템플릿)
	-> http_response객체 생성됨

장고 템플릿의 철학
	Fat Model (풍성한 모델)
	Stupid Template (비지니스 모델이 없는 템플릿)
	Thin View (간결한 뷰)

비즈니스 모델?
Stupid Template (비지니스 모델이 없는 템플릿)
 -> 템플릿 기능에 제한을 둠으로서 비즈니스 로직을 템플릿 단에 구현함을 방지
 -> 스파게티 코드 방지 
 -> 대신 비즈니스 모델을 Model에 저장 후, 유효성 검사와 저장을 통해 이를 관리하는 방향으로 간다.


템플릿 엔진을 활용하는 주요 코드 2가지
  1. djagno.shortcuts.render => HttpResponse를 생성해주는 코드
    -> request와 template, 사전(context), content_type, status, using을 인자로 받아 HttpResponse를 생성해주는 코드

  2. djagno.template.loader.render_to_string => str을 리턴해주는 코드
    -> render_to_string을 통해 문자열 응답을 만들어 내 줌. 이걸 render함수의 인자로 넣어줘 httprequest의 body를 만들어 주는 것이다.


장고의 빌트인 백엔드
  1. django.template.backends.django.DjangoTemplates
     장고에서의 일반적인 템플릿 엔진
     대개의 장고 라이브러리에서 사용하는 템플릿 엔진
     함수 호출은 가능, but 인자 없는 함수만 가능 (왜냐면 함수 호출 시 소괄호 없이 중괄호를 쓰기 때문이다 -> 이 함수가 호출 가능한 객체(Callable Object)라면 템플릿 엔진에서 알아서 호출해준다)
  2. django.tempate.backends.jinja2.Jinja2
    부분만 지원하므로 나중에 더 공부하고 보셈
(사실 다수의 템플릿 Language를 사용할 수 있지만, 다른 언어를 잘 모르니 넘어가자)
// 하지만 하나의 render 수행 시에는 하나의 템플릿 엔진만 선택적으로 사용해야함
 -> TEMPATES 세팅에서 한번 확인해보자.




클래스 기반 뷰에서의 템플릿 처리
djagno.template.response.SimpleTemplateResponse 라이브러리 클래스에서 로직 구현
  // template_name 클래스 인자를 지정하여 템플릿을 지정할 수 있다.
  // or 클래스의 종류 혹은 모델 이름에 따라 template_name 자동 지정
  // 안의 SimpleTemplateResponse를 실제로 보면 template, context를 만들고 template.render(context)를 통해 응답을 처리한다.




장고 템플릿 태그 / 필터
1. 유틸리티 성격의 장고 템플릿 내에서 호출할 수 있는 함수목록 들
   DjangoTemplateTag : {%태그명“인자1”“인자2”%}와 같은 방식으로 호출
	-> 필터보다 범용적인 문법
   DjangoTemplateFilter : {{값|필터1:인자|필터2:인자|필터3}}와 같은 방식으로 호출
// 장고 템플릿 내에서 호출할 수 있는 함수 목록

2. 다양한 빌트인 템플릿태그/필터가 제공(공식문서)
   for/endfor,  if/endif,  include,  load,  verbatim등

3. 커스텀템플릿태그/필터구현지원(공식문서)
    주의 : 템플릿태그/필터에 커스텀함수를 구현할 수 있다고, 여기에 비즈니스로직을 넣지는 말아야 한다! (대신 모델에 넣자)
    유틸리티 목적으로만 사용하기.









장고 from

form? => 입력값을 받아서 DB에 전달해주는 form 페이지 
Model 클래스와 유사하게 Form 클래스를 정의될 것이다. 
장고 form의 주요 역할
	1. 입력폼 HTML 생성 
	2. 입력폼 값 검증 및 값 변환 (model에 있는 형을 바탕으로)
	3. 검증을 통과한 값들을 사전타입으로 제공
		+ DB로의 저장




장고 스타일의 Form 처리
 폼 처리 시 같은 url(즉, 같은 view)에서 GET/POST로 나눠 처리한다.//장고의 기본 스타일
	GET 요청? : 입력폼을 보여줌
	POST 요청? : 데이터를 입력받아 유효성 검증 과정을 거친 후, 다음 작업을 거침
		IF 성공 : 해당 데이터 저장 후 ‘성공 Url’로 이동
		ELSE 실패 : 오류 메시지와 Get요청과 같은 입력폼을 다시 포여줌




Form 구현 순서 (forms.py)
 -> Model -> Form -> View -> Template
 0. Model 구현 : 사용하고자 할 모델을 구현한다

 1. Form 구현 : forms.ModelForm을 class의 인자로 받아서 model을 ‘model_name’ (자신의 모델 이름)로 초기화 시켜주면 끝이다.

2. View 구현 : 구현된 form을 import 하고, get, post명령에 대해 각각 빈 form 객체, post 정보를 저장한 form 객체를 만든다. 그리고 요청에 따라 form.save과 redirect를 통해 저장과 리다이렉트를 하면 된다.
아니면 그냥 쉽게 라이브러리 사용하면 된다
	(CreateView.as_view, UpdateView.as_view : 구글링으로 걍 알아보자.)

3. Template 구현 : {{form.as_table}}를 명시해주면 form이 만들어 진다. (진짜 간단!)



